// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geo.proto

/*
Package geo is a generated protocol buffer package.

It is generated from these files:
	geo.proto

It has these top-level messages:
	Request
	Result
	Point
	Hotel
	Address
	Image
*/
package geo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Lat float32 `protobuf:"fixed32,1,opt,name=Lat,json=lat" json:"Lat,omitempty"`
	Lon float32 `protobuf:"fixed32,2,opt,name=Lon,json=lon" json:"Lon,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Request) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Result struct {
	HotelIds []string `protobuf:"bytes,1,rep,name=HotelIds,json=hotelIds" json:"HotelIds,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetHotelIds() []string {
	if m != nil {
		return m.HotelIds
	}
	return nil
}

type Point struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=Lat,json=lat" json:"Lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=Lon,json=lon" json:"Lon,omitempty"`
	Id  string  `protobuf:"bytes,3,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Point) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Hotel struct {
	Id          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PhoneNumber string   `protobuf:"bytes,3,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Address     *Address `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Images      []*Image `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
}

func (m *Hotel) Reset()                    { *m = Hotel{} }
func (m *Hotel) String() string            { return proto.CompactTextString(m) }
func (*Hotel) ProtoMessage()               {}
func (*Hotel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Hotel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Hotel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hotel) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Hotel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Hotel) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Hotel) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Address struct {
	StreetNumber string  `protobuf:"bytes,1,opt,name=streetNumber" json:"streetNumber,omitempty"`
	StreetName   string  `protobuf:"bytes,2,opt,name=streetName" json:"streetName,omitempty"`
	City         string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State        string  `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Country      string  `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	PostalCode   string  `protobuf:"bytes,6,opt,name=postalCode" json:"postalCode,omitempty"`
	Lat          float32 `protobuf:"fixed32,7,opt,name=lat" json:"lat,omitempty"`
	Lon          float32 `protobuf:"fixed32,8,opt,name=lon" json:"lon,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Address) GetStreetNumber() string {
	if m != nil {
		return m.StreetNumber
	}
	return ""
}

func (m *Address) GetStreetName() string {
	if m != nil {
		return m.StreetName
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Address) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Image struct {
	Url     string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Default bool   `protobuf:"varint,2,opt,name=default" json:"default,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Image) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "geo.Request")
	proto.RegisterType((*Result)(nil), "geo.Result")
	proto.RegisterType((*Point)(nil), "geo.Point")
	proto.RegisterType((*Hotel)(nil), "geo.Hotel")
	proto.RegisterType((*Address)(nil), "geo.Address")
	proto.RegisterType((*Image)(nil), "geo.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Geo service

type GeoClient interface {
	Nearby(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	GetNearbyPoints(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Point, error)
}

type geoClient struct {
	cc *grpc.ClientConn
}

func NewGeoClient(cc *grpc.ClientConn) GeoClient {
	return &geoClient{cc}
}

func (c *geoClient) Nearby(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/geo.Geo/Nearby", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoClient) GetNearbyPoints(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := grpc.Invoke(ctx, "/geo.Geo/getNearbyPoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Geo service

type GeoServer interface {
	Nearby(context.Context, *Request) (*Result, error)
	GetNearbyPoints(context.Context, *Request) (*Point, error)
}

func RegisterGeoServer(s *grpc.Server, srv GeoServer) {
	s.RegisterService(&_Geo_serviceDesc, srv)
}

func _Geo_Nearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).Nearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/Nearby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).Nearby(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geo_GetNearbyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServer).GetNearbyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.Geo/GetNearbyPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServer).GetNearbyPoints(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Geo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geo.Geo",
	HandlerType: (*GeoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nearby",
			Handler:    _Geo_Nearby_Handler,
		},
		{
			MethodName: "getNearbyPoints",
			Handler:    _Geo_GetNearbyPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo.proto",
}

func init() { proto.RegisterFile("geo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x96, 0x9b, 0x4d, 0xd2, 0x4c, 0x57, 0x80, 0x2c, 0x0e, 0xd6, 0x1e, 0x50, 0x14, 0x10, 0x8a,
	0x84, 0xd8, 0x43, 0xf7, 0xc8, 0x69, 0xc5, 0x01, 0x2a, 0xa1, 0x15, 0xf2, 0x85, 0xb3, 0x5b, 0x0f,
	0x6d, 0xa4, 0xd4, 0x2e, 0xf6, 0xe4, 0xd0, 0x67, 0xe3, 0x39, 0x78, 0x1f, 0xe4, 0x9f, 0xd2, 0x96,
	0xbd, 0xf9, 0xfb, 0xf1, 0xd8, 0xdf, 0xcc, 0x40, 0xb3, 0x45, 0x7b, 0x7f, 0x70, 0x96, 0x2c, 0x2f,
	0xb6, 0x68, 0xbb, 0x8f, 0x50, 0x4b, 0xfc, 0x35, 0xa1, 0x27, 0xfe, 0x0a, 0x8a, 0x6f, 0x8a, 0x04,
	0x6b, 0x59, 0x3f, 0x93, 0xc5, 0xa8, 0x12, 0x63, 0x8d, 0x98, 0x65, 0xc6, 0x9a, 0xee, 0x1d, 0x54,
	0x12, 0xfd, 0x34, 0x12, 0xbf, 0x83, 0xf9, 0x57, 0x4b, 0x38, 0xae, 0xb4, 0x17, 0xac, 0x2d, 0xfa,
	0x46, 0xce, 0x77, 0x19, 0x77, 0x9f, 0xa0, 0xfc, 0x6e, 0x07, 0x73, 0x55, 0x92, 0x3d, 0x2b, 0xc9,
	0x62, 0x49, 0xfe, 0x02, 0x66, 0x2b, 0x2d, 0x8a, 0x96, 0xf5, 0x8d, 0x9c, 0x0d, 0xba, 0xfb, 0xcd,
	0xa0, 0x8c, 0x95, 0x83, 0x32, 0xe8, 0x78, 0x39, 0x2a, 0x9c, 0xc3, 0x8d, 0x51, 0x7b, 0x8c, 0x97,
	0x1b, 0x19, 0xcf, 0xbc, 0x85, 0xc5, 0x61, 0x67, 0x0d, 0x3e, 0x4d, 0xfb, 0x35, 0xba, 0x5c, 0xe6,
	0x92, 0x0a, 0x0e, 0x8d, 0x7e, 0xe3, 0x86, 0x03, 0x0d, 0xd6, 0x88, 0x9b, 0xe4, 0xb8, 0xa0, 0xf8,
	0x7b, 0xa8, 0x95, 0xd6, 0x0e, 0xbd, 0x17, 0x65, 0xcb, 0xfa, 0xc5, 0xf2, 0xf6, 0x3e, 0x74, 0xe9,
	0x31, 0x71, 0xf2, 0x24, 0xf2, 0x0e, 0xaa, 0x61, 0xaf, 0xb6, 0xe8, 0x45, 0xd5, 0x16, 0xfd, 0x62,
	0x09, 0xd1, 0xb6, 0x0a, 0x94, 0xcc, 0x4a, 0xf7, 0x87, 0x41, 0xfd, 0xf8, 0xcf, 0x7f, 0xeb, 0xc9,
	0x21, 0x52, 0xfe, 0x5c, 0x4a, 0x72, 0xc5, 0xf1, 0x37, 0x00, 0x19, 0x9f, 0x93, 0x5d, 0x30, 0x21,
	0xf3, 0x66, 0xa0, 0x63, 0x0e, 0x16, 0xcf, 0xfc, 0x35, 0x94, 0x9e, 0x14, 0x61, 0xce, 0x92, 0x00,
	0x17, 0x50, 0x6f, 0xec, 0x64, 0xc8, 0x1d, 0x63, 0x8a, 0x46, 0x9e, 0x60, 0x78, 0xe3, 0x60, 0x3d,
	0xa9, 0xf1, 0xb3, 0xd5, 0x28, 0xaa, 0xf4, 0xc6, 0x99, 0x09, 0x33, 0x19, 0x15, 0x89, 0xfa, 0x6a,
	0xf0, 0xa3, 0x35, 0x62, 0x7e, 0x1e, 0xfc, 0x03, 0x94, 0x31, 0x68, 0x90, 0x26, 0x37, 0xe6, 0x2c,
	0xe1, 0x18, 0x1e, 0xd6, 0xf8, 0x53, 0x4d, 0x23, 0xc5, 0xff, 0xcf, 0xe5, 0x09, 0x2e, 0x7f, 0x40,
	0xf1, 0x05, 0x2d, 0x7f, 0x0b, 0xd5, 0x13, 0x2a, 0xb7, 0x3e, 0xf2, 0xd4, 0xd8, 0xbc, 0x70, 0x77,
	0x8b, 0x8c, 0xe2, 0x3e, 0x7d, 0x80, 0x97, 0x5b, 0xa4, 0xe4, 0x8b, 0xcb, 0xe3, 0xff, 0x73, 0xa7,
	0x6e, 0x47, 0x69, 0x5d, 0xc5, 0x0d, 0x7e, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x96, 0x30, 0x17,
	0xa5, 0xce, 0x02, 0x00, 0x00,
}
